CMPT 310. Summer 2023, Assignment # 2:

The goal in this assigment is to practice design and implementation of the common search algorithms for intelligent agents in typical environments. This assignment is provided in the form of a shell module and you are going to add or modify it to fullfill the following requirements. Some of the functions int he module have printout comments saying "students to implement" or such. Once you have done that part, remove the print function please.
1-The setting is as in the last assignment, meaning a 2D grid of rooms among which a random number of them are 'dirty' and there are random number of blocked rooms as well. The goal is to use various search algorithms to help the vacuuming robot to go around and clean rooms, as in the last assignment.
2-You are going to implement 4 searching algorithms: BF Graph, DF Graph, UC, and A*. Currently BF Graph Search is partially implemented. The tasks are basically to complete and implement all the algorithms. 
3-The way implementation works is that the path is computed when you select the search from the menu and the path is returned. Then using 'next' or 'run' you can step through the path, one step at a time. For 'run' the steps follow each other with a delay of 1 seconds automatically.
4-The agent starts from the middle of the grid, and finds the 'closest' dirty room, based on the chosen search, and find the path to it. Once that goal is achieved. The next search is done for the next dirty room and so on, till all grid is clean.
5-Notice that path_cost() function and heuristic function h() have been modified from what is int he base class Problem.
Their updated definition is in the main script xy_vacuum_environment.py in VacuumPlanning class. The change is described in the comment section for each function. Read that carefully. Remind you, that path_cost() function is used for UCS search and A*. Heuristic h() function is used in A* for computing the total cost f(x) = path_cost(s) + h(s).

-Each algorithms is worth 20% except the A* which is 25%. There is also 15% mark set aside for the analysis section bellow.

For each search the following visual components should be present:
1- Explored area being colored in pink. This is currently done for BFS. This should be done for all searches. 
2- Number-of-steps and Performance labels at the top should be updated as stepping through the path is performed. Number-of-steps should be measured from the start of the cleaning till the current location. This means this is a an accumulative cost as we go through all the dirty rooms. Similarly for the Performance label. 
3- The chosen path should be rendered with a different color than yellow, maybe orange or light blue. Everytime a new search is performed (for finding a path to the next dirty room) the previous explored and path coloring should be cleared.


Analysis-In current setting we do not consider agent "turning" towards the direction which it chooses to move. Based on the previous assignment how would you propose to fix this short-coming in the context of the search problem we are solving?
How do you propose to consider turning effort to be added to the cost? How does your proposed solution affect the branching factor and the number of nodes being added to the frontier at each step? How do you think your strategy will affect the chosen path at each search? Finally come up with a pseudocode describing how to implement this at search and at the visual rendering part. This part of the assignment worth 15%. Feel free to attach a couple of pages answering these questions along with any drawing if you think would describe your solution better. 
A bonus mark will be if you implement your above proposed solution for one of the search algorithms above. If you choose to do this bonus part, I suggest add a button or option in the search list to be able to select the search with turn. For example if you choose to add it to BFS, then add an option to the list of searches named BFS_Turn for example. The bonus mark with be 5%.



To address the shortcoming of not considering turning in the agent's movement, we can modify the search problem by including the agent's orientation as part of the state. This way, the agent's current position and orientation will be considered when choosing the next action.

To incorporate turning effort into the cost, we can assign a higher cost to actions that involve changing the agent's orientation. For example, we can assign a cost of 1 to "Forward" actions and a cost of 2 to "TurnLeft" or "TurnRight" actions. This reflects the additional effort required to change the orientation.

Considering turning effort will increase the branching factor at each step. Previously, the agent had four options (UP, DOWN, LEFT, RIGHT) regardless of its orientation. Now, the agent's orientation affects the available actions. For example, if the agent is facing north, it can choose between moving UP, LEFT, or RIGHT but not DOWN. This increases the number of possible actions at each state.

As a result, the number of nodes being added to the frontier at each step will also increase. The increased branching factor means more potential paths to explore, leading to a larger frontier in the search algorithm.

The effect of considering turning effort on the chosen path will depend on the specific search algorithm used. In general, taking turning effort into account can lead to paths that minimize the number of turns or prioritize more efficient movements.

Here's a pseudocode outlining the implementation of this approach:

```
function searchWithTurn(problem):
    initialize the frontier with the initial state
    initialize an empty set of explored states
    
    while frontier is not empty:
        current_state = remove state from frontier
        
        if current_state is the goal state:
            return the path to the current_state
        
        add current_state to explored states
        
        for each action in possible_actions:
            next_state = apply action to current_state
            
            if next_state is not in explored states or frontier:
                add next_state to the frontier
                set the cost of reaching next_state to the cost of current_state plus the action cost
            
            else if next_state is in the frontier with higher cost:
                replace the existing state with next_state and update the cost
        
    return failure (no path found)
```

To implement this in the visual rendering part, you can modify the rendering logic to consider the agent's orientation when determining its movement. For example, if the agent is facing north, a movement "UP" would correspond to a forward movement, "LEFT" would correspond to a left turn, and so on. The rendering logic should update the agent's position and orientation accordingly.

Implementing this solution for a specific search algorithm like BFS_Turn would involve modifying the algorithm's logic to include the agent's orientation and turning effort. The pseudocode above can serve as a starting point for implementing BFS with turn. You would need to adapt the code to handle the specific data structures and functions used in the algorithm implementation.